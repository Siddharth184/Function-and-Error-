// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank {
    address public owner;
    mapping(address => uint256) public balances;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(amount <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    function checkBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

    function testAssert() public view {
        // Ensure that the contract balance is the sum of all user balances
        uint256 totalBalances = 0;
        for (uint i = 0; i < address(this).balance; i++) {
            totalBalances += balances[msg.sender];
        }
        assert(address(this).balance == totalBalances);
    }

    function testRevert() public pure {
        revert("This is a forced revert");
    }
}
