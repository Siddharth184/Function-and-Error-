// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BookStore {
    // Mapping of book titles to their prices
    mapping(string => uint) public bookPrices;

    // Mapping of book titles to their quantities
    mapping(string => uint) public bookQuantities;

    // Mapping of buyers to their purchased books
    mapping(address => mapping(string => uint)) public purchasedBooks;

    // Event emitted when a book is purchased
    event BookPurchased(address buyer, string title, uint quantity);

    // Function to add a new book to the store
    function addBook(string memory _title, uint _price, uint _quantity) public {
        require(_price > 0, "Book price must be greater than 0");
        require(_quantity > 0, "Book quantity must be greater than 0");

        bookPrices[_title] = _price;
        bookQuantities[_title] = _quantity;
    }

    // Function to purchase a book
    function purchaseBook(string memory _title, uint _quantity) public payable {
        require(bookQuantities[_title] >= _quantity, "Not enough books in stock");
        require(bookPrices[_title] > 0, "Book price must be greater than 0");
        require(msg.value >= bookPrices[_title] * _quantity, "Insufficient funds");

        if (bookQuantities[_title] < _quantity) {
            revert("Not enough books in stock");
        }

        bookQuantities[_title] -= _quantity;
        purchasedBooks[msg.sender][_title] += _quantity;

        if (msg.value > bookPrices[_title] * _quantity) {
            payable(msg.sender).transfer(msg.value - bookPrices[_title] * _quantity);
        }

        emit BookPurchased(msg.sender, _title, _quantity);
    }

    // Function to get the price of a book
    function getBookPrice(string memory _title) public view returns (uint) {
        require(bookPrices[_title] > 0, "Book not found");
        return bookPrices[_title];
    }

    // Function to get the quantity of a book
    function getBookQuantity(string memory _title) public view returns (uint) {
        require(bookQuantities[_title] > 0, "Book not found");
        return bookQuantities[_title];
    }

    // Function to get the number of books purchased by a buyer
    function getNumberOfPurchasedBooks(address _buyer, string memory _title) public view returns (uint) {
        require(purchasedBooks[_buyer][_title] > 0, "No books purchased");
        return purchasedBooks[_buyer][_title];
    }
}
